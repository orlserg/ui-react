{"version":3,"file":"index-f7916c05.js","sources":["../../packages/ui-react/src/components/icons/eye.tsx","../../packages/ui-react/src/components/input-text/index.tsx"],"sourcesContent":["import React from 'react';\n\nimport { SVG, IProps as IPropsSVG } from '.';\n\nexport interface IProps {\n    svg?: IPropsSVG\n}\n\nexport const IconEye = (props: IProps) => (\n    <SVG {...props.svg}>\n        <path\n            fillRule=\"evenodd\"\n            d=\"M12 4c2.728 0 5.336 1.43 7.766 3.781a23.31 23.31 0 0 1 2.24 2.515c.399.516.681.923.837 1.165l.344.539-.345.539c-.154.242-.437.649-.836 1.165-.66.857-1.41 1.713-2.24 2.515C17.336 18.569 14.728 20 12 20c-2.728 0-5.336-1.43-7.766-3.781a23.312 23.312 0 0 1-2.24-2.515 17.482 17.482 0 0 1-.836-1.165L.813 12l.345-.539c.155-.242.437-.649.836-1.165.66-.857 1.41-1.713 2.24-2.515C6.664 5.431 9.272 4 12 4Zm8.422 7.517a21.32 21.32 0 0 0-2.046-2.298C16.283 7.194 14.106 6 12 6 9.895 6 7.718 7.194 5.624 9.219A21.324 21.324 0 0 0 3.216 12a21.319 21.319 0 0 0 2.408 2.781C7.718 16.806 9.895 18 12 18c2.105 0 4.283-1.194 6.376-3.219A21.314 21.314 0 0 0 20.784 12c-.11-.152-.231-.314-.362-.483ZM8 12a4 4 0 1 0 8 0 4 4 0 0 0-8 0Zm6 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z\"\n            clipRule=\"evenodd\"\n        />\n    </SVG>\n);\n\nexport default IconEye;\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useMemo } from 'react';\n\nimport { type TStyle, useClassnames } from '../../hooks/use-classnames';\n\nimport style from './index.module.pcss';\n\ntype TNative = InputHTMLAttributes<HTMLInputElement>;\n\nexport interface IProps {\n    /**\n     * Если параметр `id` не указан, то компонент будет создан без уникального идентификатора.\n     */\n    id?: TNative['id'],\n    /**\n     * Параметр `onChange` предназначен для обработки события изменения содержимого поля ввода текста.\n     */\n    onChange?: TNative['onChange'],\n    /**\n     * Параметр `onBlur` определяет функцию обратного вызова, которая будет вызвана, когда элемент теряет фокус (когда пользователь переключается на другой элемент на странице).\n     */\n    onBlur?: TNative['onBlur'],\n    /**\n     * Параметр `onFocus` определяет функцию обратного вызова, которая будет вызываться при фокусировке на элементе `input`.\n     */\n    onFocus?: TNative['onFocus'],\n    /**\n     * Параметр `autoFocus` определяет, следует ли автоматически устанавливать фокус на элемент, когда компонент монтируется.\n     */\n    autoFocus?: TNative['autoFocus'],\n    /**\n     * Параметр `tabIndex` указывает порядковый номер элемента при переходе по клавише `Tab`. Это позволяет управлять табуляцией на странице и устанавливать последовательность перехода фокуса между элементами при нажатии на клавишу `Tab`.\n     */\n    tabIndex?: TNative['tabIndex'],\n    /**\n     * Параметр `disabled` указывает, должно ли поле ввода быть неактивным и не реагировать на пользовательский ввод. Если `disabled` установлен в `true`, пользователь не сможет редактировать текст в поле ввода и оно будет иметь соответствующий стиль, который указывает на то, что поле недоступно для редактирования.\n     */\n    disabled?: TNative['disabled'],\n    /**\n     * Параметр `maxLength` указывает максимальную длину текста, которую можно ввести в поле ввода. Если установлено значение `maxLength`, пользователь не сможет ввести более указанного количества символов. Если значение `maxLength` не задано, пользователь сможет ввести любое количество символов в поле ввода.\n     */\n    maxLength?: TNative['maxLength'],\n    /**\n     * Параметр `minLength` указывает на минимальное количество символов, которое пользователь должен ввести в поле ввода. Если значение этого параметра больше, чем длина введенного текста, то поле ввода будет считаться недопустимым (ошибочным) и будет отображаться соответствующая валидационная информация.\n     */\n    minLength?: TNative['minLength'],\n    /**\n     * Регулярное выражение, которому должно соответствовать значение поля.\n     */\n    pattern?: TNative['pattern'],\n    /**\n     * Параметр `placeholder` позволяет установить текст-подсказку внутри текстовой области, который будет отображаться, когда текстовая область пуста.\n     */\n    placeholder?: TNative['placeholder'],\n    /**\n     * Параметр `readOnly` определяет, может ли пользователь редактировать текст в поле ввода или нет.\n     */\n    readOnly?: TNative['readOnly'],\n    /**\n     * Параметр `required` указывает, что данное поле является обязательным для заполнения перед отправкой формы\n     */\n    required?: TNative['required'],\n    /**\n     * Количество символов, которое может отображаться одновременно в поле.\n     */\n    size?: TNative['size'],\n    /**\n     * Параметр `autoComplete` определяет, должен ли браузер автоматически заполнять значение в поле ввода.\n     */\n    autoComplete?: TNative['autoComplete'],\n    /**\n     * Параметр `inputMode` определяет режим ввода текста для поля ввода. Он определяет, какая клавиатура должна появляться при вводе текста на мобильных устройствах.\n     */\n    inputMode?: TNative['inputMode'],\n    /**\n     * Параметр `autoCorrect` определяет, должна ли браузерная автокоррекция включаться для вводимого текста в поле ввода.\n     */\n    autoCorrect?: TNative['autoCorrect'],\n    /**\n     * Параметр `title` устанавливает значение атрибута `title` элемента `textarea`, которое используется для отображения всплывающей подсказки при наведении на элемент.\n     */\n    title?: TNative['title'],\n    /**\n     * Параметр `name` используется для установки имени элемента формы. Это имя будет отправлено на сервер вместе со значением поля при отправке формы.\n     */\n    name: string,\n    /**\n     * Параметр `className` используется для добавления пользовательских CSS классов к компоненту. Это позволяет настраивать внешний вид компонента с помощью пользовательских стилей.\n     */\n    className?: string | TStyle,\n    /**\n     * Параметр `label` используется для установки текста метки для текстового поля. Метка обычно отображается рядом с текстовым полем и предназначена для описания.\n     */\n    label?: ReactNode,\n    /**\n     * Тип поля ввода.\n     */\n    type?: 'email' | 'password' | 'search' | 'text' | 'tel' | 'url',\n    /**\n     * Параметр `value` используется для задания значения поля.\n     */\n    value?: string,\n    /**\n     * Параметр `defaultValue` используется для задания начального значения поля.\n     */\n    defaultValue?: string,\n    /**\n     * Параметр `isError` указывает, имеет ли поле ввода ошибку или нет. Если значение этого параметра установлено в `true`, то для поля ввода будет применяться соответствующий стиль, который указывает на наличие ошибки ввода.\n     */\n    isError?: boolean,\n    /**\n     * Параметр `elError` задает элемент, который будет использован в качестве места вывода сообщения об ошибке, если `isError` имеет значение true. Это элемент содержащий текст ошибки, который отображается рядом с полем ввода или под ним.\n     */\n    elError?: ReactNode,\n    /**\n     * Элемент, который следует разместить справа от поля ввода.\n     */\n    elAfter?: ReactNode,\n    /**\n     * Элемент, который следует разместить слева от поля ввода.\n     */\n    elBefore?: ReactNode,\n    /**\n     * Используется для отображения дополнительной информации о поле ввода, например, подсказки или описания того, какое содержимое следует вводить в поле. Это элемент отображается рядом с самим полем ввода.\n     *\n     * Этот параметр может быть полезен, если вы хотите предоставить пользователю дополнительную информацию о том, как использовать поле ввода или какой формат должен иметь вводимый текст.\n     */\n    elDescription?: ReactNode\n}\n\n/**\n * Компонент InputText - это текстовый ввод, который позволяет пользователю вводить текст в поле ввода.\n */\nexport const InputText = forwardRef<HTMLInputElement | null, IProps>(({ tabIndex = 0, type = 'text', ...props }, ref) => {\n    const cn = useClassnames(style, props.className);\n\n    const elRequired = useMemo(() => {\n        if(props.required) {\n            return (\n                <sup\n                    className={cn('input-text__label-required')}\n                    children=\"*\"\n                />\n            );\n        }\n    }, [props.required]);\n\n    const elLabel = useMemo(() => {\n        if(props.label) {\n            return (\n                <div\n                    className={cn('input-text__label', {\n                        'input-text__label_disabled': props.disabled ?? props.readOnly\n                    })}\n                >\n                    {props.label}\n                    {elRequired}\n                </div>\n            );\n        }\n    }, [props.label, props.disabled, props.readOnly, elRequired]);\n\n    const elError = useMemo(() => {\n        if(props.elError) {\n            if(typeof props.elError === 'string') {\n                return (\n                    <span\n                        className={cn('input-text__error')}\n                        children={props.elError}\n                    />\n                );\n            }\n\n            return props.elError;\n        }\n    }, [props.elError]);\n\n    const elDescription = useMemo(() => {\n        if(props.elDescription) {\n            if(typeof props.elDescription === 'string') {\n                return (\n                    <span\n                        className={cn('input-text__description')}\n                        children={props.elDescription}\n                    />\n                );\n            }\n\n            return props.elDescription;\n        }\n    }, [props.elDescription]);\n\n    return (\n        <label\n            className={cn('input-text')}\n            id={props.id}\n        >\n            {elLabel}\n            <div\n                className={cn('input-text__field', {\n                    'input-text__field_disabled'        : props.disabled,\n                    'input-text__field_read-only'       : props.readOnly,\n                    'input-text__field_is-error'        : props.isError,\n                    'input-text__field_before-and-after': !!props.elBefore && !!props.elAfter,\n                    'input-text__field_before'          : !!props.elBefore && !props.elAfter,\n                    'input-text__field_after'           : !props.elBefore && !!props.elAfter\n                })}\n            >\n                {props.elBefore}\n                <input\n                    ref={ref}\n                    id={props.id ? `${props.id}-input` : undefined}\n                    name={props.name}\n                    type={type}\n                    value={props.value}\n                    defaultValue={props.defaultValue}\n                    onChange={props.onChange}\n                    onBlur={props.onBlur}\n                    onFocus={props.onFocus}\n                    autoFocus={props.autoFocus}\n                    disabled={props.readOnly ?? props.disabled}\n                    tabIndex={props.readOnly || props.disabled ? -1 : tabIndex}\n                    maxLength={props.maxLength}\n                    minLength={props.minLength}\n                    pattern={props.pattern}\n                    placeholder={props.placeholder}\n                    readOnly={props.readOnly}\n                    required={props.required}\n                    size={props.size}\n                    autoComplete={props.autoComplete}\n                    inputMode={props.inputMode}\n                    title={props.title}\n                    autoCorrect={props.autoCorrect}\n                    className={cn('input-text__input')}\n                />\n                {props.elAfter}\n            </div>\n            {elDescription}\n            {elError}\n        </label>\n    );\n});\n"],"names":["IconEye","props","jsx","SVG","InputText","forwardRef","tabIndex","type","ref","cn","useClassnames","style","elRequired","useMemo","elLabel","jsxs","elError","elDescription"],"mappings":"6KAQO,MAAAA,EAAAC,GAAAC,EAAAC,EAAA,CAAA,GAAAF,EAAA,IAAA,SAAAC,EAEC,OAAC,CAAA,SAAA,UACY,EAAA,8uBACP,SAAA,SACO,CACb,EAAA,orCCsHDE,EAAAC,EAAAA,WAAA,CAAA,CAAA,SAAAC,EAAA,EAAA,KAAAC,EAAA,OAAA,GAAAN,CAAA,EAAAO,IAAA,CACH,MAAAC,EAAAC,EAAAC,EAAAV,EAAA,SAAA,EAEAW,EAAAC,EAAAA,QAAA,IAAA,CACI,GAAAZ,EAAA,SACI,OAAAC,EACI,MAAC,CAAA,UAAAO,EAAA,4BAAA,EAC6C,SAAA,GACjC,CAAA,CAGrB,EAAA,CAAAR,EAAA,QAAA,CAAA,EAGJa,EAAAD,EAAAA,QAAA,IAAA,CACI,GAAAZ,EAAA,MACI,OAAAc,EACI,MAAC,CAAA,UAAAN,EAAA,oBAAA,CACsC,6BAAAR,EAAA,UAAAA,EAAA,QACuB,CAAA,EACzD,SAAA,CAEAA,EAAA,MAAMW,CACN,CAAA,CAAA,CAGb,EAAA,CAAAX,EAAA,MAAAA,EAAA,SAAAA,EAAA,SAAAW,CAAA,CAAA,EAGJI,EAAAH,EAAAA,QAAA,IAAA,CACI,GAAAZ,EAAA,QACI,OAAA,OAAAA,EAAA,SAAA,SACIC,EACI,OAAC,CAAA,UAAAO,EAAA,mBAAA,EACoC,SAAAR,EAAA,OACjB,CAAA,EAK5BA,EAAA,OACJ,EAAA,CAAAA,EAAA,OAAA,CAAA,EAGJgB,EAAAJ,EAAAA,QAAA,IAAA,CACI,GAAAZ,EAAA,cACI,OAAA,OAAAA,EAAA,eAAA,SACIC,EACI,OAAC,CAAA,UAAAO,EAAA,yBAAA,EAC0C,SAAAR,EAAA,aACvB,CAAA,EAK5BA,EAAA,aACJ,EAAA,CAAAA,EAAA,aAAA,CAAA,EAGJ,OAAAc,EACI,QAAC,CAAA,UAAAN,EAAA,YAAA,EAC6B,GAAAR,EAAA,GAChB,SAAA,CAETa,EAAAC,EACD,MAAC,CAAA,UAAAN,EAAA,oBAAA,CACsC,6BAAAR,EAAA,SACa,8BAAAA,EAAA,SACA,6BAAAA,EAAA,QACA,qCAAA,CAAA,CAAAA,EAAA,UAAA,CAAA,CAAAA,EAAA,QACsB,2BAAA,CAAA,CAAAA,EAAA,UAAA,CAAAA,EAAA,QACD,0BAAA,CAAAA,EAAA,UAAA,CAAA,CAAAA,EAAA,OACA,CAAA,EACpE,SAAA,CAEAA,EAAA,SAAMC,EACP,QAAC,CAAA,IAAAM,EACG,GAAAP,EAAA,GAAA,GAAAA,EAAA,WAAA,OACqC,KAAAA,EAAA,KACzB,KAAAM,EACZ,MAAAN,EAAA,MACa,aAAAA,EAAA,aACO,SAAAA,EAAA,SACJ,OAAAA,EAAA,OACF,QAAAA,EAAA,QACC,UAAAA,EAAA,UACE,SAAAA,EAAA,UAAAA,EAAA,SACiB,SAAAA,EAAA,UAAAA,EAAA,SAAA,GAAAK,EACgB,UAAAL,EAAA,UACjC,UAAAA,EAAA,UACA,QAAAA,EAAA,QACF,YAAAA,EAAA,YACI,SAAAA,EAAA,SACH,SAAAA,EAAA,SACA,KAAAA,EAAA,KACJ,aAAAA,EAAA,aACQ,UAAAA,EAAA,UACH,MAAAA,EAAA,MACJ,YAAAA,EAAA,YACM,UAAAQ,EAAA,mBAAA,CACc,CAAA,EACrCR,EAAA,OACO,CAAA,CAAA,EACXgB,EACCD,CACA,CAAA,CAAA,CAGb,CAAA;;"}