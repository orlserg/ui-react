{"version":3,"file":"index-464e8f3b.js","sources":["../../node_modules/classnames/bind.js","../../packages/ui-react/src/hooks/use-classnames/index.ts"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(this && this[arg] || arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(this, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(this && this[key] || key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import { useMemo } from 'react';\nimport type { Value } from 'classnames';\nimport classnames, { Binding } from 'classnames/bind';\n\nexport type TStyle = Record<string, string>;\n\ntype TReturnFunction<TArgs> = (\n    arg1: keyof TArgs | Partial<Record<keyof TArgs, Value>>,\n    arg2?: keyof TArgs | Partial<Record<keyof TArgs, Value>>,\n    arg3?: keyof TArgs | Partial<Record<keyof TArgs, Value>>,\n    arg4?: keyof TArgs | Partial<Record<keyof TArgs, Value>>,\n    arg5?: keyof TArgs | Partial<Record<keyof TArgs, Value>>,\n    ...args: Array<keyof TArgs | Partial<Record<keyof TArgs, Value>>>\n) => string;\n\n// export function useClassnames<TTarget>(target: TTarget, source?: string, overwrite?: boolean): TReturnFunction<TTarget>;\nexport function useClassnames<TTarget, TSource>(target: TTarget, source?: TSource, overwrite?: boolean): TReturnFunction<TSource extends string ? TTarget : TTarget & TSource>;\n\nexport function useClassnames<TTarget, TSource>(target: TTarget, source?: TSource, overwrite?: boolean) {\n    return useMemo(() => {\n        if(source) {\n            if(typeof source === 'object' && !Array.isArray(source)) {\n                if(overwrite) {\n                    return classnames.bind({\n                        ...target,\n                        ...source\n                    } as Binding) as TReturnFunction<TTarget & TSource>;\n                }\n\n                const result = { ...target } as Record<string, string>;\n\n                for(const [key, value] of Object.entries(source)) {\n                    // @ts-ignore Need fix\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/restrict-template-expressions\n                    result[key] = result[key] ? `${result[key]} ${source[key]}` : value;\n                }\n\n                return classnames.bind(result) as TReturnFunction<TTarget & TSource>;\n            }\n\n            if(typeof source === 'string') {\n                const result = { ...target } as Record<string, string>;\n                const keys = Object.keys(result);\n                const value = result[keys[0]];\n\n                if(keys[0] && value) {\n                    result[keys[0]] = `${value} ${source}`;\n                }\n\n                return classnames.bind(result as Binding) as TReturnFunction<TTarget>;\n            }\n        }\n\n        return classnames.bind(target as Binding) as TReturnFunction<TTarget>;\n    }, [target, source, overwrite]);\n}\n\n"],"names":["hasOwn","classNames","classes","i","arg","argType","key","module","useClassnames","target","source","overwrite","useMemo","classnames","result","value","keys"],"mappings":";;;;gBAOC,UAAY,CAGZ,IAAIA,EAAS,CAAE,EAAC,eAEhB,SAASC,GAAc,CAGtB,QAFIC,EAAU,CAAA,EAELC,EAAI,EAAGA,EAAI,UAAU,OAAQA,IAAK,CAC1C,IAAIC,EAAM,UAAUD,CAAC,EACrB,GAAKC,EAEL,KAAIC,EAAU,OAAOD,EAErB,GAAIC,IAAY,UAAYA,IAAY,SACvCH,EAAQ,KAAK,MAAQ,KAAKE,CAAG,GAAKA,CAAG,UAC3B,MAAM,QAAQA,CAAG,EAC3BF,EAAQ,KAAKD,EAAW,MAAM,KAAMG,CAAG,CAAC,UAC9BC,IAAY,SAAU,CAChC,GAAID,EAAI,WAAa,OAAO,UAAU,UAAY,CAACA,EAAI,SAAS,SAAQ,EAAG,SAAS,eAAe,EAAG,CACrGF,EAAQ,KAAKE,EAAI,SAAU,CAAA,EAC3B,SAGD,QAASE,KAAOF,EACXJ,EAAO,KAAKI,EAAKE,CAAG,GAAKF,EAAIE,CAAG,GACnCJ,EAAQ,KAAK,MAAQ,KAAKI,CAAG,GAAKA,CAAG,IAMzC,OAAOJ,EAAQ,KAAK,GAAG,CACvB,CAEoCK,EAAO,SAC3CN,EAAW,QAAUA,EACrBM,EAAA,QAAiBN,GAOjB,OAAO,WAAaA,CAEtB,oBCnCgB,SAAAO,EAAgCC,EAAiBC,EAAkBC,EAAqB,CACpG,OAAOC,UAAQ,IAAM,CACjB,GAAGF,EAAQ,CACP,GAAG,OAAOA,GAAW,UAAY,CAAC,MAAM,QAAQA,CAAM,EAAG,CACrD,GAAGC,EACC,OAAOE,EAAW,KAAK,CACnB,GAAGJ,EACH,GAAGC,CAAA,CACK,EAGV,MAAAI,EAAS,CAAE,GAAGL,GAEpB,SAAU,CAACH,EAAKS,CAAK,IAAK,OAAO,QAAQL,CAAM,EAGpCI,EAAAR,CAAG,EAAIQ,EAAOR,CAAG,EAAI,GAAGQ,EAAOR,CAAG,KAAKI,EAAOJ,CAAG,IAAMS,EAG3D,OAAAF,EAAW,KAAKC,CAAM,EAG9B,GAAA,OAAOJ,GAAW,SAAU,CACrB,MAAAI,EAAS,CAAE,GAAGL,GACdO,EAAO,OAAO,KAAKF,CAAM,EACzBC,EAAQD,EAAOE,EAAK,CAAC,CAAC,EAEzB,OAAAA,EAAK,CAAC,GAAKD,IACVD,EAAOE,EAAK,CAAC,CAAC,EAAI,GAAGD,KAASL,KAG3BG,EAAW,KAAKC,CAAiB,GAIzC,OAAAD,EAAW,KAAKJ,CAAiB,CACzC,EAAA,CAACA,EAAQC,EAAQC,CAAS,CAAC,CAClC","x_google_ignoreList":[0]}