{"version":3,"file":"preview-d56c3400.js","sources":["../../.storybook/components/docs/setup.tsx","../../.storybook/components/docs/auto.tsx","../../.storybook/preview.tsx"],"sourcesContent":["import React, { Fragment, ReactNode, useContext, useMemo } from 'react';\nimport { Title, Subtitle, Heading, Subheading, Primary, Controls, Stories, Markdown, Source, DocsContext, DocsContextProps } from '@storybook/blocks';\n\ninterface IContext extends DocsContextProps {\n    attachedCSFFile: {\n        meta: {\n            component: {\n                displayName: string\n            },\n            parameters: {\n                fileName: string,\n                documentation?: {\n                    setup?: {\n                        default?: {\n                            disabled?: boolean,\n                            title?: string\n                        },\n                        extended?: {\n                            title?: string,\n                            content?: ReactNode\n                        }\n                    }\n                }\n            }\n        }\n    },\n    primaryStory: {\n        moduleExport: unknown\n    }\n}\n\nexport const DocsSetup = () => {\n    const context = useContext(DocsContext) as IContext;\n    const componentName = context.attachedCSFFile.meta.component.displayName;\n    const parameters = context.attachedCSFFile.meta.parameters;\n    const setup = parameters.documentation?.setup;\n\n    console.log(context);\n\n    const elDefault = useMemo(() => {\n        if(!setup?.default || setup.default.disabled !== true) {\n            return (\n                <Fragment>\n                    <Heading children={setup?.default?.title ?? 'Обычные'} />\n                    <ol>\n                        <li>\n                            <Markdown\n                                children={`Импортируйте \\`${componentName}\\` в модуль, где вы хотите использовать наш компонент.`}\n                            />\n                            <Source\n                                language=\"ts\"\n                                code={`import { ${componentName} } from '@wb-tech/ui-react';`}\n                            />\n                        </li>\n                        <li>\n                            <Markdown>Добавьте в необходимое место.</Markdown>\n                            <Source\n                                language=\"tsx\"\n                                of={context.primaryStory.moduleExport}\n                            />\n                        </li>\n                    </ol>\n                </Fragment>\n            );\n        }\n    }, [setup?.default, context.primaryStory.moduleExport]);\n\n    const elExtended = useMemo(() => {\n        if(setup?.extended) {\n            return (\n                <Fragment>\n                    <Heading children={setup.extended.title ?? 'Расширенные'} />\n                    {setup.extended.content}\n                </Fragment>\n            );\n        }\n    }, [setup?.extended]);\n\n    return (\n        <Fragment>\n            {elDefault}\n            {elExtended}\n        </Fragment>\n    );\n};\n","import React, { Fragment } from 'react';\nimport { Title, Subtitle, Description, Unstyled, Primary, Controls, Stories, DocsContext, SourceContext } from '@storybook/blocks';\nimport { TabsComposition, DesignTokens } from '@wb-tech/ui-react';\n\nimport { DocsSetup } from './setup';\n\nexport const DocsAuto = () => {\n    return (\n        <DesignTokens>\n            <Title />\n            <Subtitle />\n            <Unstyled>\n                <TabsComposition\n                    presetStyle=\"page\"\n                    items={[{\n                        id     : 'description',\n                        elTab  : 'Описание и примеры',\n                        elPanel: (\n                            <Fragment>\n                                <Description />\n                                <Stories title=\"Примеры\" />\n                            </Fragment>\n                        )\n                    }, {\n                        id     : 'api',\n                        elTab  : 'API',\n                        elPanel: (\n                            <Fragment>\n                                <Primary />\n                                <Controls />\n                            </Fragment>\n                        )\n                    }, {\n                        id     : 'setup',\n                        elTab  : 'Настройка',\n                        elPanel: (\n                            <DocsSetup />\n                        )\n                    }]}\n                />\n            </Unstyled>\n        </DesignTokens>\n    );\n};\n","import React from 'react';\nimport type { Preview, Decorator } from '@storybook/react';\n\nimport { DesignTokens } from '../packages/ui-react/src/components/design-tokens';\n\nimport { DocsAuto } from './components/docs/auto';\n\nconst preview: Preview = {\n    parameters: {\n        actions : { argTypesRegex: '^on[A-Z].*' },\n        controls: {\n            matchers: {\n                color: /(background|color)$/i,\n                date : /Date$/\n            }\n        },\n        docs: {\n            page: () => <DocsAuto />\n        },\n        options: {\n            // @ts-expect-error не потдерживает типы в среде исполнения\n            storySort: (a, b) => {\n                if(a.title === 'Документация') {\n                    return 1;\n                }\n\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return a.title === b.title ? 0 : a.id.localeCompare(b.id, undefined, { numeric: true });\n            }\n        }\n    }\n};\n\nexport const decorators: Array<Decorator> = [\n    (Story) => (\n        <DesignTokens>\n            <Story />\n        </DesignTokens>\n    )\n];\n\nexport default preview;\n"],"names":["DocsSetup","context","useContext","DocsContext","componentName","setup","_a","elDefault","useMemo","Fragment","jsx","Heading","jsxs","Markdown","Source","elExtended","DocsAuto","DesignTokens","Title","Subtitle","Unstyled","TabsComposition","Description","Stories","Primary","Controls","preview","a","b","decorators","Story"],"mappings":"++BA+BO,MAAMA,EAAY,IAAM,OACrB,MAAAC,EAAUC,aAAWC,CAAW,EAChCC,EAAgBH,EAAQ,gBAAgB,KAAK,UAAU,YAEvDI,GAAQC,EADKL,EAAQ,gBAAgB,KAAK,WACvB,gBAAX,YAAAK,EAA0B,MAExC,QAAQ,IAAIL,CAAO,EAEb,MAAAM,EAAYC,EAAAA,QAAQ,IAAM,OAC5B,GAAG,EAACH,GAAA,MAAAA,EAAO,UAAWA,EAAM,QAAQ,WAAa,GAC7C,SACKI,WACG,CAAA,SAAA,CAAAC,EAACC,EAAQ,CAAA,WAAUL,EAAAD,GAAA,YAAAA,EAAO,UAAP,YAAAC,EAAgB,QAAS,UAAW,IACtD,KACG,CAAA,SAAA,CAAAM,EAAC,KACG,CAAA,SAAA,CAAAF,EAACG,EAAA,CACG,SAAU,kBAAkBT,yDAAA,CAChC,EACAM,EAACI,EAAA,CACG,SAAS,KACT,KAAM,YAAYV,+BAAA,CACtB,CAAA,EACJ,IACC,KACG,CAAA,SAAA,CAAAM,EAACG,GAAS,SAA6B,+BAAA,CAAA,EACvCH,EAACI,EAAA,CACG,SAAS,MACT,GAAIb,EAAQ,aAAa,YAAA,CAC7B,CAAA,EACJ,CAAA,EACJ,CACJ,CAAA,CAAA,CAER,EACD,CAACI,GAAA,YAAAA,EAAO,QAASJ,EAAQ,aAAa,YAAY,CAAC,EAEhDc,EAAaP,EAAAA,QAAQ,IAAM,CAC7B,GAAGH,GAAA,MAAAA,EAAO,SACN,SACKI,WACG,CAAA,SAAA,CAAAC,EAACC,EAAQ,CAAA,SAAUN,EAAM,SAAS,OAAS,cAAe,EACzDA,EAAM,SAAS,OACpB,CAAA,CAAA,CAER,EACD,CAACA,GAAA,YAAAA,EAAO,QAAQ,CAAC,EAEpB,SACKI,WACI,CAAA,SAAA,CAAAF,EACAQ,CACL,CAAA,CAAA,CAER,EC9EaC,EAAW,MAEfC,EACG,CAAA,SAAA,CAAAP,EAACQ,EAAM,EAAA,IACNC,EAAS,EAAA,IACTC,EACG,CAAA,SAAAV,EAACW,EAAA,CACG,YAAY,OACZ,MAAO,CAAC,CACJ,GAAS,cACT,MAAS,qBACT,UACKZ,WACG,CAAA,SAAA,CAAAC,EAACY,EAAY,EAAA,EACbZ,EAACa,EAAQ,CAAA,MAAM,SAAU,CAAA,CAAA,EAC7B,CAAA,EAEL,CACC,GAAS,MACT,MAAS,MACT,UACKd,WACG,CAAA,SAAA,CAAAC,EAACc,EAAQ,EAAA,IACRC,EAAS,EAAA,CAAA,EACd,CAAA,EAEL,CACC,GAAS,QACT,MAAS,YACT,UACKzB,EAAU,EAAA,CAAA,CAElB,CAAA,CAAA,EAET,CACJ,CAAA,CAAA,EClCF0B,GAAmB,CACrB,WAAY,CACR,QAAU,CAAE,cAAe,YAAa,EACxC,SAAU,CACN,SAAU,CACN,MAAO,uBACP,KAAO,OACX,CACJ,EACA,KAAM,CACF,KAAM,IAAMhB,EAACM,EAAS,EAAA,CAC1B,EACA,QAAS,CAEL,UAAW,CAACW,EAAGC,IACRD,EAAE,QAAU,eACJ,EAIJA,EAAE,QAAUC,EAAE,MAAQ,EAAID,EAAE,GAAG,cAAcC,EAAE,GAAI,OAAW,CAAE,QAAS,GAAM,CAE9F,CACJ,CACJ,EAEaC,GAA+B,CACvCC,GACGpB,EAACO,EACG,CAAA,SAAAP,EAACoB,GAAM,CAAA,EACX,CAER"}