{"version":3,"file":"index-28999ff7.js","sources":["../../packages/ui-react/src/components/button/index.tsx"],"sourcesContent":["import React, { ButtonHTMLAttributes, useMemo } from 'react';\nimport { isFragment, isElement } from 'react-is';\n\nimport { TStyle, useClassnames } from '../../hooks/use-classnames';\nimport { Loader } from '../loader';\n\nimport style from './index.module.pcss';\n\ntype TNative = ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport interface IProps {\n    /**\n     * CSS класс или классы, которые будут применены к кнопке.\n     **/\n    className?: TStyle | string,\n    /**\n     * Устанавливает размер кнопки.\n     **/\n    presetSize?: 'large' | 'medium' | 'small',\n    /**\n     * Устанавливает стиль кнопки.\n     **/\n    presetStyle?: 'primary' | 'default' | 'dashed' | 'ghost' | 'negative' | 'success' | 'deprecated',\n    /**\n     * Если установлен в true, то кнопка будет в состоянии загрузки.\n     **/\n    isLoading?: boolean,\n    /**\n     * Если установлен в true, то кнопка будет компактной.\n     **/\n    isCompact?: boolean,\n    /**\n     * Уникальный идентификатор для кнопки.\n     **/\n    id?: TNative['id'],\n    /**\n     * Устанавливает тип кнопки.\n     **/\n    type?: TNative['type'],\n    /**\n     * Устанавливает порядок перехода по кнопке с помощью клавиши `Tab`.\n     **/\n    tabIndex?: TNative['tabIndex'],\n    /**\n     * Определяет функцию обратного вызова, которая будет вызвана при фокусировке на кнопке.\n     **/\n    onFocus?: TNative['onFocus'],\n    /**\n     * Определяет функцию обратного вызова, которая будет выполнена при нажатии на кнопку.\n     **/\n    onClick?: TNative['onClick'],\n    /**\n     * Содержимое кнопки.\n     **/\n    children?: TNative['children'],\n    /**\n     * Устанавливает горячую клавишу для кнопки.\n     **/\n    accessKey?: TNative['accessKey'],\n    /**\n     * Если установлен в true, то кнопка будет заблокирована.\n     **/\n    disabled?: TNative['disabled']\n}\n\nconst LOADER_STYLE_MAP = {\n    primary   : 'white',\n    default   : 'rich-grey',\n    dashed    : 'rich-grey',\n    ghost     : 'rich-grey',\n    negative  : 'red',\n    success   : 'rich-grey',\n    deprecated: 'white'\n} as const;\n\nconst isValidCompact = (element: IProps['children']) => {\n    // @ts-expect-error Непонятно как быть с типом\n    return isElement(element) && !!(element.type === 'svg' || !isFragment(element) && element.type.name?.startsWith('Icon'));\n};\n\nconst isCompact = (element: IProps['children']) => {\n    return Array.isArray(element) ? element.every(isValidCompact) : isValidCompact(element);\n};\n\n/**\n * Компонент `Button` представляет собой кнопку, которая может использоваться для выполнения каких-либо действий в приложении.\n **/\nexport const Button = ({ presetSize = 'medium', presetStyle = 'default', type = 'button', ...props }: IProps) => {\n    const cn = useClassnames(style, props.className);\n\n    const elChildren = useMemo(() => {\n        if(props.isLoading) {\n            return (\n                <Loader\n                    presetStyle={LOADER_STYLE_MAP[presetStyle]}\n                    presetSize=\"button\"\n                />\n            );\n        }\n\n        return props.children;\n    }, [props.children, props.isLoading, presetStyle]);\n\n    return (\n        <button\n            id={props.id}\n            type={type}\n            disabled={props.isLoading ?? props.disabled}\n            tabIndex={props.isLoading || props.disabled ? -1 : props.tabIndex}\n            onFocus={props.onFocus}\n            onClick={props.onClick}\n            accessKey={props.accessKey}\n            className={cn('button', {\n                [`button_${presetSize}`] : presetSize,\n                [`button_${presetStyle}`]: presetStyle,\n                'button_compact'         : typeof props.isCompact === 'undefined' ? isCompact(props.children) : props.isCompact\n            })}\n            children={elChildren}\n        />\n    );\n};\n"],"names":["LOADER_STYLE_MAP","isValidCompact","element","isElement","isFragment","_a","isCompact","Button","presetSize","presetStyle","type","props","cn","useClassnames","style","elChildren","useMemo","jsx","Loader"],"mappings":"ktBAiEAA,EAAA,CAAyB,QAAA,QACT,QAAA,YACA,OAAA,YACA,MAAA,YACA,SAAA,MACA,QAAA,YACA,WAAA,OAEhB,EAEAC,EAAAC,GAAA,OAEI,OAAAC,EAAAA,UAAAD,CAAA,GAAA,CAAA,EAAAA,EAAA,OAAA,OAAA,CAAAE,EAAA,WAAAF,CAAA,KAAAG,EAAAH,EAAA,KAAA,OAAA,MAAAG,EAAA,WAAA,SACJ,EAEAC,EAAAJ,GACI,MAAA,QAAAA,CAAA,EAAAA,EAAA,MAAAD,CAAA,EAAAA,EAAAC,CAAA,EAMGK,EAAA,CAAA,CAAA,WAAAC,EAAA,SAAA,YAAAC,EAAA,UAAA,KAAAC,EAAA,SAAA,GAAAC,KAAA,CACH,MAAAC,EAAAC,EAAAC,EAAAH,EAAA,SAAA,EAEAI,EAAAC,EAAAA,QAAA,IACIL,EAAA,UACIM,EACIC,EAAC,CAAA,YAAAlB,EAAAS,CAAA,EAC4C,WAAA,QAC9B,CAAA,EAKvBE,EAAA,SAAa,CAAAA,EAAA,SAAAA,EAAA,UAAAF,CAAA,CAAA,EAGjB,OAAAQ,EACI,SAAC,CAAA,GAAAN,EAAA,GACa,KAAAD,EACV,SAAAC,EAAA,WAAAA,EAAA,SACmC,SAAAA,EAAA,WAAAA,EAAA,SAAA,GAAAA,EAAA,SACsB,QAAAA,EAAA,QAC1C,QAAAA,EAAA,QACA,UAAAA,EAAA,UACE,UAAAC,EAAA,SAAA,CACO,CAAA,UAAAJ,GAAA,EAAAA,EACO,CAAA,UAAAC,GAAA,EAAAA,EACA,eAAA,OAAAE,EAAA,UAAA,IAAAL,EAAAK,EAAA,QAAA,EAAAA,EAAA,SAC2E,CAAA,EACzG,SAAAI,CACS,CAAA,CAGtB"}