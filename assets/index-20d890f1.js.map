{"version":3,"file":"index-20d890f1.js","sources":["../../packages/ui-react/src/components/checkbox/index.tsx"],"sourcesContent":["import React, { forwardRef, InputHTMLAttributes, ReactNode, useMemo } from 'react';\n\nimport { TStyle, useClassnames } from '../../hooks/use-classnames';\n\nimport style from './index.module.pcss';\n\ntype TNative = InputHTMLAttributes<HTMLInputElement>;\n\nexport interface IProps {\n    /**\n     * Название поля ввода, которое будет отправлено на сервер вместе со значением.\n     **/\n    name: string,\n    /**\n     * Позволяет добавить пользовательские CSS-классы\n     **/\n    className?: string | TStyle,\n    /**\n     * Указывает, находится ли переключатель в неопределенном состоянии.\n     **/\n    indeterminate?: boolean,\n    /**\n     * Текст метки, связанной с переключателем.\n     **/\n    label?: ReactNode,\n    /**\n     * Значение, которое будет отправлено на сервер при отправке формы.\n     **/\n    value?: string,\n    /**\n     * Значение переключателя по умолчанию.\n     **/\n    defaultValue?: string,\n    /**\n     * Дополнительный текст, который поясняет, что выбирает переключатель.\n     **/\n    description?: string,\n    /**\n     * Устанавливает или определяет, должен ли компонент быть отмечен.\n     **/\n    checked?: TNative['checked'],\n    /**\n     * Определяет, должен ли флажок быть установлен при первоначальной загрузке компонента.\n     **/\n    defaultChecked?: TNative['defaultChecked'],\n    /**\n     * Функция обратного вызова, которая будет вызываться при изменении значения переключателя.\n     **/\n    onChange?: TNative['onChange'],\n    /**\n     * Функция обратного вызова, которая будет вызываться при клике на переключатель.\n     **/\n    onClick?: TNative['onClick'],\n    /**\n     * Функция обратного вызова, которая будет вызываться при потере фокуса на переключателе.\n     **/\n    onBlur?: TNative['onBlur'],\n    /**\n     * Функция обратного вызова, которая будет вызываться при получении фокуса на переключателе.\n     **/\n    onFocus?: TNative['onFocus'],\n    /**\n     * Указывает, должен ли компонент получать фокус при монтировании (отрисовке) на странице.\n     **/\n    autoFocus?: TNative['autoFocus'],\n    /**\n     * Уникальный идентификатор переключателя.\n     **/\n    id?: TNative['id'],\n    /**\n     * Порядковый номер элемента при переключении по `Tab`.\n     **/\n    tabIndex?: TNative['tabIndex'],\n    /**\n     * Определяет, будет ли компонент отключен.\n     **/\n    disabled?: TNative['disabled']\n}\n\n/**\n * Компонент `Checkbox` представляет собой переключатель, который позволяет пользователю выбирать один или несколько вариантов из группы.\n **/\nexport const Checkbox = forwardRef<HTMLInputElement | null, IProps>(({ tabIndex = 0, ...props }, ref) => {\n    const cn = useClassnames(style, props.className);\n\n    const elDescription = useMemo(() => {\n        if(props.description) {\n            return (\n                <span\n                    className={cn('checkbox__description')}\n                    children={props.description}\n                />\n            );\n        }\n    }, [props.description]);\n\n    return (\n        <label\n            id={props.id}\n            className={cn('checkbox', {\n                'checkbox_disabled'   : props.disabled,\n                'checkbox_description': props.description\n            })}\n        >\n            <input\n                ref={ref}\n                id={props.id ? `${props.id}-input` : undefined}\n                name={props.name}\n                role=\"checkbox\"\n                type=\"checkbox\"\n                aria-checked={props.indeterminate ? 'mixed' : !!props.checked}\n                checked={props.checked}\n                defaultChecked={props.defaultChecked}\n                value={props.value}\n                defaultValue={props.defaultValue}\n                onChange={props.onChange}\n                onBlur={props.onBlur}\n                onFocus={props.onFocus}\n                onClick={props.onClick}\n                autoFocus={props.autoFocus}\n                disabled={props.disabled}\n                tabIndex={props.disabled ? -1 : tabIndex}\n                className={cn('checkbox__input', {\n                    'checkbox__input_indeterminate': props.indeterminate\n                })}\n            />\n            {props.label}\n            {elDescription}\n        </label>\n    );\n});\n"],"names":["Checkbox","forwardRef","tabIndex","props","ref","cn","useClassnames","style","elDescription","useMemo","jsx","jsxs"],"mappings":"4cAkFOA,EAAAC,EAAA,WAAA,CAAA,CAAA,SAAAC,EAAA,EAAA,GAAAC,CAAA,EAAAC,IAAA,CACH,MAAAC,EAAAC,EAAAC,EAAAJ,EAAA,SAAA,EAEAK,EAAAC,EAAAA,QAAA,IAAA,CACI,GAAAN,EAAA,YACI,OAAAO,EACI,OAAC,CAAA,UAAAL,EAAA,uBAAA,EACwC,SAAAF,EAAA,WACrB,CAAA,CAG5B,EAAA,CAAAA,EAAA,WAAA,CAAA,EAGJ,OAAAQ,EACI,QAAC,CAAA,GAAAR,EAAA,GACa,UAAAE,EAAA,WAAA,CACgB,kBAAAF,EAAA,SACQ,qBAAAA,EAAA,WACA,CAAA,EACjC,SAAA,CAEDO,EAAA,QAAC,CAAA,IAAAN,EACG,GAAAD,EAAA,GAAA,GAAAA,EAAA,WAAA,OACqC,KAAAA,EAAA,KACzB,KAAA,WACP,KAAA,WACA,eAAAA,EAAA,cAAA,QAAA,CAAA,CAAAA,EAAA,QACiD,QAAAA,EAAA,QACvC,eAAAA,EAAA,eACO,MAAAA,EAAA,MACT,aAAAA,EAAA,aACO,SAAAA,EAAA,SACJ,OAAAA,EAAA,OACF,QAAAA,EAAA,QACC,QAAAA,EAAA,QACA,UAAAA,EAAA,UACE,SAAAA,EAAA,SACD,SAAAA,EAAA,SAAA,GAAAD,EACgB,UAAAG,EAAA,kBAAA,CACC,8BAAAF,EAAA,aACU,CAAA,CAC1C,CAAA,EACLA,EAAA,MACOK,CACN,CAAA,CAAA,CAGb,CAAA"}