{"version":3,"file":"index.stories-f466edcf.js","sources":["../../packages/ui-react/src/components/textarea/index.tsx"],"sourcesContent":["import React, { forwardRef, TextareaHTMLAttributes, ReactNode, useMemo } from 'react';\n\nimport { TStyle, useClassnames } from '../../hooks/use-classnames';\n\nimport style from './index.module.pcss';\n\ntype TNative = TextareaHTMLAttributes<HTMLTextAreaElement>;\n\nexport interface IProps {\n    /**\n     * Параметр `onChange` предназначен для обработки события изменения содержимого поля ввода текста.\n     */\n    onChange?: TNative['onChange'],\n    /**\n     * Параметр `onBlur` определяет функцию обратного вызова, которая будет вызвана, когда элемент теряет фокус (когда пользователь переключается на другой элемент на странице).\n     */\n    onBlur?: TNative['onBlur'],\n    /**\n     * Параметр `onFocus` определяет функцию обратного вызова, которая будет вызываться при фокусировке на элементе `textarea`.\n     */\n    onFocus?: TNative['onFocus'],\n    /**\n     * Параметр `autoFocus` определяет, следует ли автоматически устанавливать фокус на элемент, когда компонент монтируется.\n     */\n    autoFocus?: TNative['autoFocus'],\n    /**\n     * Параметр `tabIndex` указывает порядковый номер элемента при переходе по клавише `Tab`. Это позволяет управлять табуляцией на странице и устанавливать последовательность перехода фокуса между элементами при нажатии на клавишу `Tab`.\n     */\n    tabIndex?: TNative['tabIndex'],\n    /**\n     * Параметр `disabled` указывает, должно ли поле ввода быть неактивным и не реагировать на пользовательский ввод. Если `disabled` установлен в `true`, пользователь не сможет редактировать текст в поле ввода и оно будет иметь соответствующий стиль, который указывает на то, что поле недоступно для редактирования.\n     */\n    disabled?: TNative['disabled'],\n    /**\n     * Параметр `maxLength` указывает максимальную длину текста, которую можно ввести в поле ввода. Если установлено значение `maxLength`, пользователь не сможет ввести более указанного количества символов. Если значение `maxLength` не задано, пользователь сможет ввести любое количество символов в поле ввода.\n     */\n    maxLength?: TNative['maxLength'],\n    /**\n     * Параметр `minLength` указывает на минимальное количество символов, которое пользователь должен ввести в поле ввода. Если значение этого параметра больше, чем длина введенного текста, то поле ввода будет считаться недопустимым (ошибочным) и будет отображаться соответствующая валидационная информация.\n     */\n    minLength?: TNative['minLength'],\n    /**\n     * Параметр `placeholder` позволяет установить текст-подсказку внутри текстовой области, который будет отображаться, когда текстовая область пуста.\n     */\n    placeholder?: TNative['placeholder'],\n    /**\n     * Параметр `readOnly` определяет, может ли пользователь редактировать текст в поле ввода или нет.\n     */\n    readOnly?: TNative['readOnly'],\n    /**\n     * Параметр `required` указывает, что данное поле является обязательным для заполнения перед отправкой формы\n     */\n    required?: TNative['required'],\n    /**\n     * Параметр `autoComplete` определяет, должен ли браузер автоматически заполнять значение в поле ввода.\n     */\n    autoComplete?: TNative['autoComplete'],\n    /**\n     * Параметр `inputMode` определяет режим ввода текста для поля ввода. Он определяет, какая клавиатура должна появляться при вводе текста на мобильных устройствах.\n     */\n    inputMode?: TNative['inputMode'],\n    /**\n     * Параметр `title` устанавливает значение атрибута `title` элемента `textarea`, которое используется для отображения всплывающей подсказки при наведении на элемент.\n     */\n    title?: TNative['title'],\n    /**\n     * Параметр `autoCorrect` определяет, должна ли браузерная автокоррекция включаться для вводимого текста в поле ввода.\n     */\n    autoCorrect?: TNative['autoCorrect'],\n    /**\n     * Параметр `cols` задает количество символов по горизонтали, которое будет отображаться в текстовом поле.\n     */\n    cols?: TNative['cols'],\n    /**\n     * Параметр `rows` определяет количество строк, которое будет отображаться в поле ввода текста.\n     */\n    rows?: TNative['rows'],\n    /**\n     * Параметр `wrap` задает тип переноса строк.\n     */\n    wrap?: TNative['wrap'],\n    /**\n     * Параметр `name` используется для установки имени элемента формы. Это имя будет отправлено на сервер вместе со значением текстового поля при отправке формы.\n     */\n    name: string,\n    /**\n     * Параметр `className` используется для добавления пользовательских CSS классов к компоненту. Это позволяет настраивать внешний вид компонента с помощью пользовательских стилей.\n     */\n    className?: string | TStyle,\n    /**\n     * Параметр `label` используется для установки текста метки для текстового поля. Метка обычно отображается рядом с текстовым полем и предназначена для описания.\n     */\n    label?: ReactNode,\n    /**\n     * Параметр `value` используется для задания значения поля.\n     */\n    value?: string,\n    /**\n     * Параметр `defaultValue` используется для задания начального значения поля.\n     */\n    defaultValue?: string,\n    /**\n     * Параметр `isError` указывает, имеет ли поле ввода ошибку или нет. Если значение этого параметра установлено в `true`, то для поля ввода будет применяться соответствующий стиль, который указывает на наличие ошибки ввода.\n     */\n    isError?: boolean,\n    /**\n     * Параметр `elError` задает элемент, который будет использован в качестве места вывода сообщения об ошибке, если `isError` имеет значение true. Это элемент содержащий текст ошибки, который отображается рядом с полем ввода или под ним.\n     */\n    elError?: ReactNode,\n    /**\n     * Используется для отображения дополнительной информации о поле ввода, например, подсказки или описания того, какое содержимое следует вводить в поле. Это элемент отображается рядом с самим полем ввода.\n     *\n     * Этот параметр может быть полезен, если вы хотите предоставить пользователю дополнительную информацию о том, как использовать поле ввода или какой формат должен иметь вводимый текст.\n     */\n    elDescription?: ReactNode,\n    /**\n     * Если параметр `id` не указан, то компонент будет создан без уникального идентификатора.\n     */\n    id?: string\n}\n\n/**\n * Компонент для отображения многострочного поля ввода текста.\n */\nexport const InputTextarea = forwardRef<HTMLTextAreaElement | null, IProps>(({ tabIndex = 0, ...props }, ref) => {\n    const cn = useClassnames(style, props.className);\n\n    const elRequired = useMemo(() => {\n        if(props.required) {\n            return (\n                <sup\n                    className={cn('input-textarea__label-required')}\n                    children=\"*\"\n                />\n            );\n        }\n    }, [props.required]);\n\n    const elLabel = useMemo(() => {\n        if(props.label) {\n            return (\n                <div\n                    className={cn('input-textarea__label', {\n                        'input-textarea__label_disabled': props.disabled ?? props.readOnly\n                    })}\n                >\n                    {props.label}\n                    {elRequired}\n                </div>\n            );\n        }\n    }, [props.label, props.disabled, props.readOnly, elRequired]);\n\n    const elError = useMemo(() => {\n        if(props.elError) {\n            if(typeof props.elError === 'string') {\n                return (\n                    <span\n                        className={cn('input-textarea__error')}\n                        children={props.elError}\n                    />\n                );\n            }\n\n            return props.elError;\n        }\n    }, [props.elError]);\n\n    const elDescription = useMemo(() => {\n        if(props.elDescription) {\n            if(typeof props.elDescription === 'string') {\n                return (\n                    <span\n                        className={cn('input-textarea__description')}\n                        children={props.elDescription}\n                    />\n                );\n            }\n\n            return props.elDescription;\n        }\n    }, [props.elDescription]);\n\n    return (\n        <label\n            id={props.id}\n            className={cn('input-textarea')}\n        >\n            {elLabel}\n            <textarea\n                ref={ref}\n                name={props.name}\n                value={props.value}\n                defaultValue={props.defaultValue}\n                onChange={props.onChange}\n                onBlur={props.onBlur}\n                onFocus={props.onFocus}\n                autoFocus={props.autoFocus}\n                cols={props.cols}\n                rows={props.rows}\n                wrap={props.wrap}\n                disabled={props.readOnly ?? props.disabled}\n                tabIndex={props.readOnly || props.disabled ? -1 : tabIndex}\n                maxLength={props.maxLength}\n                minLength={props.minLength}\n                placeholder={props.placeholder}\n                readOnly={props.readOnly}\n                required={props.required}\n                autoComplete={props.autoComplete}\n                inputMode={props.inputMode}\n                title={props.title}\n                autoCorrect={props.autoCorrect}\n                className={cn('input-textarea__input', {\n                    'input-textarea__input_is-error': props.isError\n                })}\n            />\n            {elDescription}\n            {elError}\n        </label>\n    );\n});\n"],"names":["InputTextarea","forwardRef","tabIndex","props","ref","cn","useClassnames","style","elRequired","useMemo","jsx","elLabel","jsxs","elError","elDescription"],"mappings":"6vBA4HOA,EAAAC,EAAA,WAAA,CAAA,CAAA,SAAAC,EAAA,EAAA,GAAAC,CAAA,EAAAC,IAAA,CACH,MAAAC,EAAAC,EAAAC,EAAAJ,EAAA,SAAA,EAEAK,EAAAC,EAAAA,QAAA,IAAA,CACI,GAAAN,EAAA,SACI,OAAAO,EACI,MAAC,CAAA,UAAAL,EAAA,gCAAA,EACiD,SAAA,GACrC,CAAA,CAGrB,EAAA,CAAAF,EAAA,QAAA,CAAA,EAGJQ,EAAAF,EAAAA,QAAA,IAAA,CACI,GAAAN,EAAA,MACI,OAAAS,EACI,MAAC,CAAA,UAAAP,EAAA,wBAAA,CAC0C,iCAAAF,EAAA,UAAAA,EAAA,QACuB,CAAA,EAC7D,SAAA,CAEAA,EAAA,MAAMK,CACN,CAAA,CAAA,CAGb,EAAA,CAAAL,EAAA,MAAAA,EAAA,SAAAA,EAAA,SAAAK,CAAA,CAAA,EAGJK,EAAAJ,EAAAA,QAAA,IAAA,CACI,GAAAN,EAAA,QACI,OAAA,OAAAA,EAAA,SAAA,SACIO,EACI,OAAC,CAAA,UAAAL,EAAA,uBAAA,EACwC,SAAAF,EAAA,OACrB,CAAA,EAK5BA,EAAA,OACJ,EAAA,CAAAA,EAAA,OAAA,CAAA,EAGJW,EAAAL,EAAAA,QAAA,IAAA,CACI,GAAAN,EAAA,cACI,OAAA,OAAAA,EAAA,eAAA,SACIO,EACI,OAAC,CAAA,UAAAL,EAAA,6BAAA,EAC8C,SAAAF,EAAA,aAC3B,CAAA,EAK5BA,EAAA,aACJ,EAAA,CAAAA,EAAA,aAAA,CAAA,EAGJ,OAAAS,EACI,QAAC,CAAA,GAAAT,EAAA,GACa,UAAAE,EAAA,gBAAA,EACoB,SAAA,CAE7BM,EAAAD,EACD,WAAC,CAAA,IAAAN,EACG,KAAAD,EAAA,KACY,MAAAA,EAAA,MACC,aAAAA,EAAA,aACO,SAAAA,EAAA,SACJ,OAAAA,EAAA,OACF,QAAAA,EAAA,QACC,UAAAA,EAAA,UACE,KAAAA,EAAA,KACL,KAAAA,EAAA,KACA,KAAAA,EAAA,KACA,SAAAA,EAAA,UAAAA,EAAA,SACsB,SAAAA,EAAA,UAAAA,EAAA,SAAA,GAAAD,EACgB,UAAAC,EAAA,UACjC,UAAAA,EAAA,UACA,YAAAA,EAAA,YACE,SAAAA,EAAA,SACH,SAAAA,EAAA,SACA,aAAAA,EAAA,aACI,UAAAA,EAAA,UACH,MAAAA,EAAA,MACJ,YAAAA,EAAA,YACM,UAAAE,EAAA,wBAAA,CACoB,iCAAAF,EAAA,OACK,CAAA,CAC3C,CAAA,EACLW,EACCD,CACA,CAAA,CAAA,CAGb,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}