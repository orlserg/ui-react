import{a as t,j as a}from"./jsx-runtime-68f49b4e.js";import{S as _}from"./index-f6f0a7b7.js";import{r as l}from"./index-f1f749bf.js";import{u as o}from"./index-464e8f3b.js";const i=E=>t(_,{...E.svg,children:t("path",{fillRule:"evenodd",d:"M12 4c2.728 0 5.336 1.43 7.766 3.781a23.31 23.31 0 0 1 2.24 2.515c.399.516.681.923.837 1.165l.344.539-.345.539c-.154.242-.437.649-.836 1.165-.66.857-1.41 1.713-2.24 2.515C17.336 18.569 14.728 20 12 20c-2.728 0-5.336-1.43-7.766-3.781a23.312 23.312 0 0 1-2.24-2.515 17.482 17.482 0 0 1-.836-1.165L.813 12l.345-.539c.155-.242.437-.649.836-1.165.66-.857 1.41-1.713 2.24-2.515C6.664 5.431 9.272 4 12 4Zm8.422 7.517a21.32 21.32 0 0 0-2.046-2.298C16.283 7.194 14.106 6 12 6 9.895 6 7.718 7.194 5.624 9.219A21.324 21.324 0 0 0 3.216 12a21.319 21.319 0 0 0 2.408 2.781C7.718 16.806 9.895 18 12 18c2.105 0 4.283-1.194 6.376-3.219A21.314 21.314 0 0 0 20.784 12c-.11-.152-.231-.314-.362-.483ZM8 12a4 4 0 1 0 8 0 4 4 0 0 0-8 0Zm6 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z",clipRule:"evenodd"})});try{i.displayName="IconEye",i.__docgenInfo={description:"",displayName:"IconEye",props:{svg:{defaultValue:null,description:"",name:"svg",required:!1,type:{name:"IProps"}}}}}catch{}try{eye.displayName="eye",eye.__docgenInfo={description:"",displayName:"eye",props:{svg:{defaultValue:null,description:"",name:"svg",required:!1,type:{name:"IProps"}}}}}catch{}const s={"input-text":"_input-text_lj29b_1","input-text__field":"_input-text__field_lj29b_1","input-text__field_disabled":"_input-text__field_disabled_lj29b_1","input-text__label":"_input-text__label_lj29b_1","input-text__label_disabled":"_input-text__label_disabled_lj29b_1","input-text__label-required":"_input-text__label-required_lj29b_1","input-text__field_read-only":"_input-text__field_read-only_lj29b_1","input-text__field_is-error":"_input-text__field_is-error_lj29b_1","input-text__field_before-and-after":"_input-text__field_before-and-after_lj29b_1","input-text__field_before":"_input-text__field_before_lj29b_1","input-text__field_after":"_input-text__field_after_lj29b_1","input-text__input":"_input-text__input_lj29b_1","input-text__error":"_input-text__error_lj29b_1","input-text__description":"_input-text__description_lj29b_1"},r=l.forwardRef(({tabIndex:E=0,type:d="text",...u},F)=>{const e=o(s,u.className),n=l.useMemo(()=>{if(u.required)return t("sup",{className:e("input-text__label-required"),children:"*"})},[u.required]),B=l.useMemo(()=>{if(u.label)return a("div",{className:e("input-text__label",{"input-text__label_disabled":u.disabled??u.readOnly}),children:[u.label,n]})},[u.label,u.disabled,u.readOnly,n]),C=l.useMemo(()=>{if(u.elError)return typeof u.elError=="string"?t("span",{className:e("input-text__error"),children:u.elError}):u.elError},[u.elError]),D=l.useMemo(()=>{if(u.elDescription)return typeof u.elDescription=="string"?t("span",{className:e("input-text__description"),children:u.elDescription}):u.elDescription},[u.elDescription]);return a("label",{className:e("input-text"),id:u.id,children:[B,a("div",{className:e("input-text__field",{"input-text__field_disabled":u.disabled,"input-text__field_read-only":u.readOnly,"input-text__field_is-error":u.isError,"input-text__field_before-and-after":!!u.elBefore&&!!u.elAfter,"input-text__field_before":!!u.elBefore&&!u.elAfter,"input-text__field_after":!u.elBefore&&!!u.elAfter}),children:[u.elBefore,t("input",{ref:F,id:u.id?`${u.id}-input`:void 0,name:u.name,type:d,value:u.value,defaultValue:u.defaultValue,onChange:u.onChange,onBlur:u.onBlur,onFocus:u.onFocus,autoFocus:u.autoFocus,disabled:u.readOnly??u.disabled,tabIndex:u.readOnly||u.disabled?-1:E,maxLength:u.maxLength,minLength:u.minLength,pattern:u.pattern,placeholder:u.placeholder,readOnly:u.readOnly,required:u.required,size:u.size,autoComplete:u.autoComplete,inputMode:u.inputMode,title:u.title,autoCorrect:u.autoCorrect,className:e("input-text__input")}),u.elAfter]}),D,C]})});try{r.displayName="InputText",r.__docgenInfo={description:"Компонент InputText - это текстовый ввод, который позволяет пользователю вводить текст в поле ввода.",displayName:"InputText",props:{id:{defaultValue:null,description:"Если параметр `id` не указан, то компонент будет создан без уникального идентификатора.",name:"id",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Параметр `onChange` предназначен для обработки события изменения содержимого поля ввода текста.",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLInputElement>"}},onBlur:{defaultValue:null,description:"Параметр `onBlur` определяет функцию обратного вызова, которая будет вызвана, когда элемент теряет фокус (когда пользователь переключается на другой элемент на странице).",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onFocus:{defaultValue:null,description:"Параметр `onFocus` определяет функцию обратного вызова, которая будет вызываться при фокусировке на элементе `input`.",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},autoFocus:{defaultValue:null,description:"Параметр `autoFocus` определяет, следует ли автоматически устанавливать фокус на элемент, когда компонент монтируется.",name:"autoFocus",required:!1,type:{name:"boolean"}},tabIndex:{defaultValue:{value:"0"},description:"Параметр `tabIndex` указывает порядковый номер элемента при переходе по клавише `Tab`. Это позволяет управлять табуляцией на странице и устанавливать последовательность перехода фокуса между элементами при нажатии на клавишу `Tab`.",name:"tabIndex",required:!1,type:{name:"number"}},disabled:{defaultValue:null,description:"Параметр `disabled` указывает, должно ли поле ввода быть неактивным и не реагировать на пользовательский ввод. Если `disabled` установлен в `true`, пользователь не сможет редактировать текст в поле ввода и оно будет иметь соответствующий стиль, который указывает на то, что поле недоступно для редактирования.",name:"disabled",required:!1,type:{name:"boolean"}},maxLength:{defaultValue:null,description:"Параметр `maxLength` указывает максимальную длину текста, которую можно ввести в поле ввода. Если установлено значение `maxLength`, пользователь не сможет ввести более указанного количества символов. Если значение `maxLength` не задано, пользователь сможет ввести любое количество символов в поле ввода.",name:"maxLength",required:!1,type:{name:"number"}},minLength:{defaultValue:null,description:"Параметр `minLength` указывает на минимальное количество символов, которое пользователь должен ввести в поле ввода. Если значение этого параметра больше, чем длина введенного текста, то поле ввода будет считаться недопустимым (ошибочным) и будет отображаться соответствующая валидационная информация.",name:"minLength",required:!1,type:{name:"number"}},pattern:{defaultValue:null,description:"Регулярное выражение, которому должно соответствовать значение поля.",name:"pattern",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Параметр `placeholder` позволяет установить текст-подсказку внутри текстовой области, который будет отображаться, когда текстовая область пуста.",name:"placeholder",required:!1,type:{name:"string"}},readOnly:{defaultValue:null,description:"Параметр `readOnly` определяет, может ли пользователь редактировать текст в поле ввода или нет.",name:"readOnly",required:!1,type:{name:"boolean"}},required:{defaultValue:null,description:"Параметр `required` указывает, что данное поле является обязательным для заполнения перед отправкой формы",name:"required",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:"Количество символов, которое может отображаться одновременно в поле.",name:"size",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"Параметр `autoComplete` определяет, должен ли браузер автоматически заполнять значение в поле ввода.",name:"autoComplete",required:!1,type:{name:"string"}},inputMode:{defaultValue:null,description:"Параметр `inputMode` определяет режим ввода текста для поля ввода. Он определяет, какая клавиатура должна появляться при вводе текста на мобильных устройствах.",name:"inputMode",required:!1,type:{name:"enum",value:[{value:'"email"'},{value:'"search"'},{value:'"text"'},{value:'"tel"'},{value:'"url"'},{value:'"none"'},{value:'"numeric"'},{value:'"decimal"'}]}},autoCorrect:{defaultValue:null,description:"Параметр `autoCorrect` определяет, должна ли браузерная автокоррекция включаться для вводимого текста в поле ввода.",name:"autoCorrect",required:!1,type:{name:"string"}},title:{defaultValue:null,description:"Параметр `title` устанавливает значение атрибута `title` элемента `textarea`, которое используется для отображения всплывающей подсказки при наведении на элемент.",name:"title",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"Параметр `name` используется для установки имени элемента формы. Это имя будет отправлено на сервер вместе со значением поля при отправке формы.",name:"name",required:!0,type:{name:"string"}},className:{defaultValue:null,description:"Параметр `className` используется для добавления пользовательских CSS классов к компоненту. Это позволяет настраивать внешний вид компонента с помощью пользовательских стилей.",name:"className",required:!1,type:{name:"string | TStyle"}},label:{defaultValue:null,description:"Параметр `label` используется для установки текста метки для текстового поля. Метка обычно отображается рядом с текстовым полем и предназначена для описания.",name:"label",required:!1,type:{name:"ReactNode"}},type:{defaultValue:{value:"text"},description:"Тип поля ввода.",name:"type",required:!1,type:{name:"enum",value:[{value:'"email"'},{value:'"password"'},{value:'"search"'},{value:'"text"'},{value:'"tel"'},{value:'"url"'}]}},value:{defaultValue:null,description:"Параметр `value` используется для задания значения поля.",name:"value",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"Параметр `defaultValue` используется для задания начального значения поля.",name:"defaultValue",required:!1,type:{name:"string"}},isError:{defaultValue:null,description:"Параметр `isError` указывает, имеет ли поле ввода ошибку или нет. Если значение этого параметра установлено в `true`, то для поля ввода будет применяться соответствующий стиль, который указывает на наличие ошибки ввода.",name:"isError",required:!1,type:{name:"boolean"}},elError:{defaultValue:null,description:"Параметр `elError` задает элемент, который будет использован в качестве места вывода сообщения об ошибке, если `isError` имеет значение true. Это элемент содержащий текст ошибки, который отображается рядом с полем ввода или под ним.",name:"elError",required:!1,type:{name:"ReactNode"}},elAfter:{defaultValue:null,description:"Элемент, который следует разместить справа от поля ввода.",name:"elAfter",required:!1,type:{name:"ReactNode"}},elBefore:{defaultValue:null,description:"Элемент, который следует разместить слева от поля ввода.",name:"elBefore",required:!1,type:{name:"ReactNode"}},elDescription:{defaultValue:null,description:`Используется для отображения дополнительной информации о поле ввода, например, подсказки или описания того, какое содержимое следует вводить в поле. Это элемент отображается рядом с самим полем ввода.

Этот параметр может быть полезен, если вы хотите предоставить пользователю дополнительную информацию о том, как использовать поле ввода или какой формат должен иметь вводимый текст.`,name:"elDescription",required:!1,type:{name:"ReactNode"}}}}}catch{}export{r as I,i as a};
//# sourceMappingURL=index-f7916c05.js.map
